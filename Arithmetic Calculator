import tkinter as tk
import math

root = tk.Tk()
root.title("Scientific Calculator")
root.geometry("400x670")
root.resizable(False, False)

expression = ""
history = []
dark_mode = True
scientific_mode = False

equation = tk.StringVar()

# ---------- THEME FUNCTION ----------
def set_theme():
    bg = "#222831" if dark_mode else "#EEEEEE"
    fg = "white" if dark_mode else "#000000"
    entry_bg = "#393E46" if dark_mode else "#FFFFFF"
    
    op_btn = "#00ADB5" if dark_mode else "#FFC107"
    num_btn = "#393E46" if dark_mode else "#DDDDDD"
    hist_fg = "#00ADB5" if dark_mode else "#FF5722"

    root.configure(bg=bg)
    display.configure(bg=entry_bg, fg=fg)
    history_list.configure(bg=entry_bg, fg=fg)
    theme_btn.configure(bg=op_btn, fg=fg)
    sci_btn.configure(bg=op_btn, fg=fg)

    for btn in all_buttons:
        text = btn['text']
        if text in "/*-+←^π√sin cos tan log":
            btn.configure(bg=op_btn, fg=fg)
        elif text == "C":
            btn.configure(bg="#FF5722" if not dark_mode else "#EEEEEE", fg=bg)
        else:
            btn.configure(bg=num_btn, fg=fg)

# ---------- ACTION HANDLERS ----------
def toggle_theme():
    global dark_mode
    dark_mode = not dark_mode
    set_theme()

def toggle_scientific():
    global scientific_mode
    scientific_mode = not scientific_mode
    render_buttons()

def backspace():
    global expression
    expression = expression[:-1]
    equation.set(expression)

def click(btn):
    global expression
    if btn == "=":
        try:
            expr = expression.replace("√", "math.sqrt") \
                             .replace("π", "math.pi") \
                             .replace("^", "**") \
                             .replace("sin", "math.sin") \
                             .replace("cos", "math.cos") \
                             .replace("tan", "math.tan") \
                             .replace("log", "math.log10")
            result = str(eval(expr))
            history.append(expression + " = " + result)
            equation.set(result)
            expression = result
            update_history()
        except:
            equation.set("Error")
            expression = ""
    elif btn == "C":
        expression = ""
        equation.set("")
    else:
        expression += str(btn)
        equation.set(expression)

def update_history():
    history_list.delete(0, tk.END)
    for item in history[-5:][::-1]:
        history_list.insert(tk.END, item)

# ---------- DISPLAY ----------
display = tk.Entry(root, textvariable=equation, font=("Arial", 26), bd=0, justify="right")
display.pack(pady=20, padx=10, fill="both", ipady=20)

# ---------- BUTTONS ----------
basic_buttons = [
    ['C', '/', '*', '←'],
    ['7', '8', '9', '-'],
    ['4', '5', '6', '+'],
    ['1', '2', '3', '='],
    ['0', '.', '^', 'π']
]

sci_buttons = [
    ['sin', 'cos', 'tan', 'log'],
    ['√', '', '', '']
]

button_frame = tk.Frame(root)
button_frame.pack()

all_buttons = []

def render_buttons():
    global all_buttons
    for widget in button_frame.winfo_children():
        widget.destroy()
    all_buttons = []

    rows = sci_buttons + basic_buttons if scientific_mode else basic_buttons
    for r, row in enumerate(rows):
        for c, text in enumerate(row):
            if text == '':
                continue
            action = (lambda x=text: click(x)) if text != '←' else backspace
            btn = tk.Button(
                button_frame, text=text, font=("Arial", 18),
                width=5, height=2, bd=0, command=action
            )
            btn.grid(row=r, column=c, padx=5, pady=5)
            all_buttons.append(btn)
    set_theme()

# ---------- HISTORY PANEL ----------
tk.Label(root, text="History", font=("Arial", 16, "bold")).pack(pady=(10, 0))
history_list = tk.Listbox(root, height=5, font=("Arial", 14))
history_list.pack(padx=10, pady=5, fill="x")

# ---------- CONTROL BUTTONS ----------
control_frame = tk.Frame(root)
control_frame.pack(pady=10)

theme_btn = tk.Button(control_frame, text="Toggle Theme", font=("Arial", 12), command=toggle_theme)
theme_btn.grid(row=0, column=0, padx=10)

sci_btn = tk.Button(control_frame, text="Toggle Scientific", font=("Arial", 12), command=toggle_scientific)
sci_btn.grid(row=0, column=1, padx=10)

# ---------- KEYBOARD BINDING ----------
def handle_key(event):
    key = event.keysym
    char = event.char

    # Direct characters
    if char in "0123456789.+-*/^":
        click(char)
    elif key == "Return":
        click("=")
    elif key == "BackSpace":
        backspace()
    elif key.lower() in {"s", "c", "t", "l"}:
        # allow sin, cos, tan, log if typed
        char_map = {"s": "sin", "c": "cos", "t": "tan", "l": "log"}
        click(char_map[key.lower()])

# Bind keypress event
root.bind("<Key>", handle_key)

# ---------- RUN APP ----------
render_buttons()
root.mainloop()
